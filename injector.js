// Generated by CoffeeScript 1.6.2
(function() {
  var root, _ref,
    __slice = [].slice;

  root = (_ref = typeof window !== "undefined" && window !== null ? window : exports) != null ? _ref : this;

  root.Injector = (function() {
    var rootInjector;

    rootInjector = new Injector;

    Injector.register = function() {
      return rootInjector.register.apply(rootInjector, arguments);
    };

    Injector.unregister = function() {
      return rootInjector.unregister.apply(rootInjector, arguments);
    };

    Injector.mapSingleton = function() {
      return rootInjector.mapSingleton.apply(rootInjector, arguments);
    };

    Injector.mapValue = function() {
      return rootInjector.mapValue.apply(rootInjector, arguments);
    };

    Injector.unmap = function() {
      return rootInjector.unmap.apply(rootInjector, arguments);
    };

    Injector.ensureProperties = function(instance) {
      var k, v, _ref1;

      _ref1 = instance.constructor.inject;
      for (k in _ref1) {
        v = _ref1[k];
        if (instance.hasOwnProperty(k)) {
          throw new Error("Injected property must not be object own property");
        }
        if (!instance[k]) {
          throw new Error("lack of [" + k + "] on initialize");
        }
      }
      return true;
    };

    function Injector() {
      this.known_list = [];
    }

    Injector.prototype.register = function(ListnerClass) {
      var key, _results;

      this.known_list.push(ListnerClass);
      _results = [];
      for (key in ListnerClass.inject) {
        _results.push(Object.defineProperty(ListnerClass.prototype, key, {
          value: null,
          writable: false,
          configurable: true
        }));
      }
      return _results;
    };

    Injector.prototype.unregister = function(ListnerClass) {
      var k, n, v, _ref1;

      n = this.known_list.indexOf(ListnerClass);
      _ref1 = ListnerClass.inject;
      for (k in _ref1) {
        v = _ref1[k];
        Object.defineProperty(ListnerClass.prototype, k, {
          value: null,
          writable: false,
          configurable: true
        });
      }
      return this.known_list.splice(n, 1);
    };

    Injector.prototype.mapSingleton = function() {
      var Class, args;

      Class = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.known_list.forEach(function(ListnerClass) {
        var key, val, _ref1, _results;

        _ref1 = ListnerClass.inject;
        _results = [];
        for (key in _ref1) {
          val = _ref1[key];
          if (val === Class) {
            _results.push(Object.defineProperty(ListnerClass.prototype, key, {
              value: (function(func, args, ctor) {
                ctor.prototype = func.prototype;
                var child = new ctor, result = func.apply(child, args);
                return Object(result) === result ? result : child;
              })(Class, args, function(){}),
              writable: false,
              configurable: true
            }));
          }
        }
        return _results;
      });
    };

    Injector.prototype.mapValue = function(Class, instance) {
      if (instance == null) {
        instance = void 0;
      }
      instance || (instance = new Class);
      if (!(instance instanceof Class)) {
        throw "" + instance + " is not " + Class + " instance";
      }
      return this.known_list.forEach(function(ListnerClass) {
        var key, val, _ref1, _results;

        _ref1 = ListnerClass.inject;
        _results = [];
        for (key in _ref1) {
          val = _ref1[key];
          if (val === Class) {
            _results.push(ListnerClass.prototype[key] = instance);
          }
        }
        return _results;
      });
    };

    Injector.prototype.unmap = function(Class) {
      if (Class == null) {
        Class = null;
      }
      return this.known_list.forEach(function(ListnerClass) {
        var key, val, _ref1, _results;

        _ref1 = ListnerClass.inject;
        _results = [];
        for (key in _ref1) {
          val = _ref1[key];
          if (!(Class != null) || val === Class) {
            _results.push(Object.defineProperty(ListnerClass.prototype, key, {
              value: null,
              writable: false,
              configurable: true
            }));
          }
        }
        return _results;
      });
    };

    return Injector;

  })();

}).call(this);
