// Generated by CoffeeScript 1.6.2
(function() {
  var Injector, assert, describe, it;

  Injector = require("../src/injector").Injector;

  assert = require("assert");

  describe = function(str, fn) {
    return fn();
  };

  it = function(str, fn) {
    return fn();
  };

  describe("Injector", function() {
    describe("#mapValue", function() {
      it("should inject before new", function() {
        var X, Y, y;

        X = (function() {
          function X() {}

          return X;

        })();
        Y = (function() {
          function Y() {}

          Injector.register(Y);

          Y.inject = {
            x: X
          };

          return Y;

        })();
        Injector.mapValue(X);
        y = new Y;
        return assert.ok(y.x instanceof X);
      });
      return it("should inject before new", function() {
        var X, Y1, Y2, y1, y2;

        X = (function() {
          function X() {}

          return X;

        })();
        Y1 = (function() {
          function Y1() {}

          Injector.register(Y1);

          Y1.inject = {
            x: X
          };

          return Y1;

        })();
        Y2 = (function() {
          function Y2() {}

          Injector.register(Y2);

          Y2.inject = {
            x: X
          };

          return Y2;

        })();
        Injector.mapValue(X);
        y1 = new Y1;
        y2 = new Y2;
        return assert.ok(y1.x !== y2.x);
      });
    });
    describe("#mapSingleton", function() {
      it("should inject before new", function() {
        var X, Y, y;

        X = (function() {
          function X() {}

          return X;

        })();
        Y = (function() {
          function Y() {}

          Injector.register(Y);

          Y.inject = {
            x: X
          };

          return Y;

        })();
        Injector.mapSingleton(X);
        y = new Y;
        return assert.ok(y.x instanceof X);
      });
      return it("should inject before new", function() {
        var X, Y1, Y2, y1, y2;

        X = (function() {
          function X() {}

          return X;

        })();
        Y1 = (function() {
          function Y1() {}

          Injector.register(Y1);

          Y1.inject = {
            x: X
          };

          return Y1;

        })();
        Y2 = (function() {
          function Y2() {}

          Injector.register(Y2);

          Y2.inject = {
            x: X
          };

          return Y2;

        })();
        Injector.mapSingleton(X);
        y1 = new Y1;
        y2 = new Y2;
        return assert.ok(y1.x === y2.x);
      });
    });
    describe("#unregister", function() {
      return it("should remove from inejected list", function() {
        var X, Y, y;

        X = (function() {
          function X() {}

          return X;

        })();
        Y = (function() {
          function Y() {}

          Injector.register(Y);

          Y.inject = {
            x: X
          };

          return Y;

        })();
        Injector.mapValue(X);
        y = new Y;
        assert.ok(y.x instanceof X);
        Injector.unregister(Y);
        return assert.ok(y.x === null);
      });
    });
    describe("#unmap", function() {
      return it("should remove injected object", function() {
        var X, Y, y;

        X = (function() {
          function X() {}

          return X;

        })();
        Y = (function() {
          function Y() {}

          Injector.register(Y);

          Y.inject = {
            x: X
          };

          return Y;

        })();
        Injector.mapValue(X);
        y = new Y;
        assert.ok(y.x instanceof X);
        Injector.unmap(X);
        return assert.ok(y.x === null);
      });
    });
    return describe("#new", function() {
      return it("should instantiate new injector", function() {
        var X, childInjector;

        childInjector = new Injector;
        X = (function() {
          function X() {}

          return X;

        })();
        return childInjector.mapValue(X);
      });
    });
  });

}).call(this);
